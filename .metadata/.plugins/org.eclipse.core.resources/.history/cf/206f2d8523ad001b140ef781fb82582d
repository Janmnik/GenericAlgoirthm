package genericAlgorithm;

import java.util.ArrayList;
import java.util.Arrays;
public class GenericAlgorithm {
	
	public double Ai;
	public double Bi;
	private double mutationPropability;
	private double crossingPropability;
	private double env;
	private double deltaEnv;
	
	private int n, populationLength;
	private double precision;
	private int times;
	//potrzebne potem do zapisu wynik�w poszczeg�lnych generacji
	private static ArrayList<Population> populations = new ArrayList<Population>();
	
	public GenericAlgorithm(double _Ai, double _Bi,double _precision,int _n,int _populationLength,double _env,double _mutationPropability, double _crossingPropability, int _times) {
		Ai = _Ai;
		Bi = _Bi;
		mutationPropability = _mutationPropability;
		crossingPropability = _crossingPropability;
		precision = _precision;
		populationLength = _populationLength;
		env = _env;
		n = _n;
		times = _times;
		
	}
	
	public void run(GoalFunction goal) throws CloneNotSupportedException{
		
		//1 krok inicjalizacja poczatkowej populacji chromosomow
		//2 krok ocena przystosowania chromosomow w populacji
		//3 krok: selekcja choromosomow: ruletka
		//4 krok: zastpspwanie operatorow genetycznych
		//	mutowanie
		//	krzyzowanie
		//5 krok: stworzenie nowej popualcji
		
		FileSaver globalMaxes = new FileSaver(String.format("globalMAX%d .txt",populationLength));
		double AVGMAX [][] = new double[50][(int)(1000/populationLength)];
		
		for(int i = 0 ; i < times; i++) {
			int generation  = 1;
			Chromosome baseChromosome = new Chromosome(Ai,Bi,n,precision);
			//krok 1 & 2
			Population population = new Population(baseChromosome,populationLength);
			population.adaptPopulation(goal);	
			int j = 0;
			
			while(population.Adaptation.adaptationNr < env) {
				//krok 3
				population = new DecisionRoulette(population,"MAX").newPopulation;
				
				//double _avgMax [] = new double[(int)(1000/populationLength)];
				//_avgMax[j] = population.Adaptation.MAX;
				AVGMAX[i][j] = population.Adaptation.MAX;
				
				//krok 4 & 5
				population = crossingChromosomes(population);
				population = mutatePopulation(population);
				
				System.out.println("GENERACJA "+generation);
				generation++;
				population.Adaptation.showAdaptation();
				j++;
				
			}
			globalMaxes.WriteToFile(String.format("%g",population.GLOBALMAX));
			
			population.Adaptation.adaptationNr = 0;
		}
		
//		population.showPopulationAsBinary();
	}
	
	
	private Population mutatePopulation(Population population) {
		
		Mutation mutation = new Mutation(mutationPropability);
		int length = population.population.length;
		for(int i = 0; i < length;i++) {
			
			if(Math.random() < mutationPropability) {
				population.population[i] = mutation.genomeMutation(population.population[i]);
			}
		}
		
		return population;
	}
	
	private Population crossingChromosomes(Population crossingPopulation) throws CloneNotSupportedException {
		
		int randomChromosome;
		int chromosomeLength = crossingPopulation.population[0].getChromosomeLength();
		int length = crossingPopulation.population.length;
		double randomPropability = 0.0;
		
		Chromosome parentX,parentY;
		for(int i = 0;i<length;i++) {
			randomPropability = Math.random();
			if(randomPropability<=crossingPropability) {
				randomChromosome = (int)(Math.random()*length);
				Intersection2P intersection2P = new Intersection2P(chromosomeLength);
				parentX = (Chromosome) crossingPopulation.population[i].clone();
				parentY = (Chromosome) crossingPopulation.population[randomChromosome].clone();
				crossingPopulation.population[i] = intersection2P.getChild(parentX, parentY);
				crossingPopulation.population[randomChromosome] = intersection2P.getChild(parentY, parentX);
			}
		}
		
		return crossingPopulation;
	}
	
	
	private double[] calcualateAVGLocalMAX(double[][]arr) {
		double AVGLocalMAX [] = new double[times];
		for(int i = 0; i < times;i++) {
			int j = 0;
		}
	}
	
	private double calculateAVG(double[] arr) {
		return Arrays.stream(arr).average().getAsDouble();
	}
	
	
}
